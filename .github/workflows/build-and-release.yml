name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Get commit message
      id: commit_message
      run: echo "message=$(git log --format=%B -n 1 ${{ github.sha }})" >> $GITHUB_OUTPUT

    - name: Check if release commit
      id: check_release
      run: |
        if [[ "${{ steps.commit_message.outputs.message }}" =~ ^release:\ [0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "version=$(echo '${{ steps.commit_message.outputs.message }}' | sed 's/release: //')" >> $GITHUB_OUTPUT
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "version=beta-${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.check_release.outputs.version }}
        mvn versions:commit

    - name: Build with Maven
      run: mvn clean compile package

    - name: Run tests
      run: mvn test

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: skyeblock-${{ steps.check_release.outputs.version }}
        path: target/*.jar
        retention-days: 90

    - name: Create Beta Release
      if: steps.check_release.outputs.is_release == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: beta-${{ github.run_number }}
        release_name: Beta Release ${{ github.run_number }}
        body: |
          ## Beta Release ${{ github.run_number }}
          
          This is an automated beta release built from commit ${{ github.sha }}.
          
          **Changes:**
          - ${{ steps.commit_message.outputs.message }}
          
          **Note:** This is a beta release and may contain bugs. Use at your own risk.
        draft: false
        prerelease: true

    - name: Upload Beta Release Asset
      if: steps.check_release.outputs.is_release == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_beta_release.outputs.upload_url }}
        asset_path: target/skyeblock-${{ steps.check_release.outputs.version }}.jar
        asset_name: skyeblock-beta-${{ github.run_number }}.jar
        asset_content_type: application/java-archive

    - name: Generate Changelog
      if: steps.check_release.outputs.is_release == 'true'
      id: changelog
      run: |
        # Get the previous release tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          # If no previous tag, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Get commits since last tag
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Save changelog to file
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        echo "$CHANGELOG" >> changelog.md
        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.check_release.outputs.version }}" >> changelog.md
        
        # Set output for use in release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: steps.check_release.outputs.is_release == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.check_release.outputs.version }}
        release_name: Release v${{ steps.check_release.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.check_release.outputs.is_release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/skyeblock-${{ steps.check_release.outputs.version }}.jar
        asset_name: skyeblock-${{ steps.check_release.outputs.version }}.jar
        asset_content_type: application/java-archive

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Maven verify
      run: mvn clean verify

    - name: Check code formatting (optional)
      run: |
        if mvn help:describe -Dplugin=com.spotify.fmt:fmt-maven-plugin 2>/dev/null; then
          mvn fmt:check
        else
          echo "Code formatting plugin not configured, skipping..."
        fi
      continue-on-error: true
